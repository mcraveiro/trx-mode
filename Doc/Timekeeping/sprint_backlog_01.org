#+title: Sprint Backlog 01
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { inner(i) outer(o) toil(t) }

* Sprint Goals

- Create infrastructure for project

* Stories

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75 :formula %
#+CAPTION: Clock summary at [2024-03-30 Sat 17:42]
| <75>                                          |        |      |       |
| Headline                                      | Time   |      |     % |
|-----------------------------------------------+--------+------+-------|
| *Total time*                                  | *7:20* |      | 100.0 |
|-----------------------------------------------+--------+------+-------|
| Stories                                       | 7:20   |      | 100.0 |
| Backlog refinement                            |        | 0:33 |   7.5 |
| Generate test data files for sample project   |        | 0:11 |   2.5 |
| Read boost-test code to get ideas             |        | 0:33 |   7.5 |
| Download and install omnisharp                |        | 0:20 |   4.5 |
| Ensure build works with xunit                 |        | 0:19 |   4.3 |
| Print XML properly in ielm                    |        | 0:21 |   4.8 |
| Investigate sharper's way to find solutions   |        | 1:02 |  14.1 |
| Investigate eglot's use of project            |        | 0:27 |   6.1 |
| Create a basic tree widget with projects      |        | 1:09 |  15.7 |
| Get xunit samples to compile cleanly on Linux |        | 0:58 |  13.2 |
| Clean up folder structure                     |        | 0:24 |   5.5 |
| Create a simple function to read TRX XML      |        | 0:06 |   1.4 |
| Create a summary buffer from TRX content      |        | 0:30 |   6.8 |
| Group TRX files in filesystem                 |        | 0:27 |   6.1 |
#+end:

** STARTED Backlog refinement                                         :outer:
   :LOGBOOK:
   CLOCK: [2024-03-28 Thu 17:30]--[2024-03-28 Thu 17:36] =>  0:06
   CLOCK: [2024-03-28 Thu 13:51]--[2024-03-28 Thu 13:58] =>  0:07
   CLOCK: [2024-03-27 Wed 10:23]--[2024-03-27 Wed 10:43] =>  0:20
   :END:

Time taken with agile processes such as backlog refinement, etc.

#+begin_src emacs-lisp
(org-agenda-file-to-front)
#+end_src

** STARTED Generate test data files for sample project                :inner:
   :LOGBOOK:
   CLOCK: [2024-03-27 Wed 10:11]--[2024-03-27 Wed 10:22] =>  0:11
   :END:

Create a realistic project with a few unit tests. Things to test:

- project with more than one solution; correctly detects each solution and the
  CS projects associated with each solution.

** STARTED Read boost-test code to get ideas                          :inner:
   :LOGBOOK:
   CLOCK: [2024-03-27 Wed 13:50]--[2024-03-27 Wed 14:23] =>  0:33
   :END:

** COMPLETED Download and install omnisharp                           :outer:
   :LOGBOOK:
   CLOCK: [2024-03-28 Thu 13:10]--[2024-03-28 Thu 13:30] =>  0:20
   :END:

We need the latest version

** COMPLETED Ensure build works with xunit                            :outer:
   :LOGBOOK:
   CLOCK: [2024-03-28 Thu 13:31]--[2024-03-28 Thu 13:50] =>  0:19
   :END:

Requires internet for nuget.

** COMPLETED Print XML properly in ielm                                :toil:
   :LOGBOOK:
   CLOCK: [2024-03-28 Thu 17:01]--[2024-03-28 Thu 17:22] =>  0:21
   :END:

At present we are getting a truncated lisp object in ielm. Get the entire
contents.

#+begin_src emacs-lisp
(setq print-length 1024)
(setq print-level 100)
#+end_src

- [[https://emacs.stackexchange.com/questions/27338/lisp-form-print-depth][Lisp form print depth]]

** COMPLETED Investigate sharper's way to find solutions              :inner:
   :LOGBOOK:
   CLOCK: [2024-03-29 Fri 12:09]--[2024-03-29 Fri 13:00] =>  0:51
   CLOCK: [2024-03-29 Fri 11:50]--[2024-03-29 Fri 12:01] =>  0:11
   :END:

- sharper already has code to find solution and list projects in solution. We
  can either copy and paste or add a dependency. For now we will copy and paste.
  Maybe we could create a library with shared code for dotnet tool?

** COMPLETED Investigate eglot's use of project                       :inner:
   :LOGBOOK:
   CLOCK: [2024-03-28 Thu 18:12]--[2024-03-28 Thu 18:39] =>  0:27
   :END:

We need to understand how we know we are in a project. Eglot already does this.

- how does this work with projectile?

** COMPLETED Create a basic tree widget with projects                 :inner:
   :LOGBOOK:
   CLOCK: [2024-03-29 Fri 13:38]--[2024-03-29 Fri 14:10] =>  0:32
   CLOCK: [2024-03-29 Fri 13:01]--[2024-03-29 Fri 13:38] =>  0:37
   :END:

- [[https://stackoverflow.com/questions/25104291/change-text-of-tree-widget-node][Change text of tree widget node]]

#+begin_src emacs-lisp
(require 'tree-widget)

(defun my-create-tree-widget ()
  (interactive)
  (with-current-buffer
    (get-buffer-create "*my-tree-widget*")
    (setq-local my-tree-widget
        (widget-create
         'tree-widget
         :open t
         :tag "one"
         :args
         (list (widget-convert
            'tree-widget
            :tag "two"
            :args (mapcar
                    (apply-partially #'widget-convert 'item)
                    '("three" "four"))))))
    (switch-to-buffer (current-buffer))))
#+end_src


** COMPLETED Get xunit samples to compile cleanly on Linux            :inner:
   :LOGBOOK:
   CLOCK: [2024-03-29 Fri 17:13]--[2024-03-29 Fri 18:11] =>  0:58
   :END:

At present we are getting a lot of weird errors which are not related to the
unit tests. Try to fix these so we can get a clean run of the tests.

- installed mono, fixed issues with mono.

** STARTED Clean up folder structure                                  :outer:
   :LOGBOOK:
   CLOCK: [2024-03-28 Thu 13:51]--[2024-03-28 Thu 14:15] =>  0:24
   :END:

Its a bit messy at the moment, we should organise it.

- convert files to unix.

** STARTED Create a simple function to read TRX XML                   :inner:
   :LOGBOOK:
   CLOCK: [2024-03-28 Thu 17:23]--[2024-03-28 Thu 17:29] =>  0:06
   :END:

We need a very simple function to read a given file and print its contents.

** STARTED Create a summary buffer from TRX content                  :inner:
   :LOGBOOK:
   CLOCK: [2024-03-30 Sat 12:12]--[2024-03-30 Sat 12:36] =>  0:24
   CLOCK: [2024-03-28 Thu 17:41]--[2024-03-28 Thu 17:47] =>  0:06
   :END:

** STARTED Group TRX files in filesystem                              :inner:
   :LOGBOOK:
   CLOCK: [2024-03-31 Sun 05:35]--[2024-03-31 Sun 05:55] =>  0:20
   CLOCK: [2024-03-30 Sat 17:15a]--[2024-03-30 Sat 17:42] =>  0:27
   :END:

We need to list TRX files in filesystem and group them by project, by most
recent. Algorithm:

- find the solution file.
- list projects in solution.
- list all TRX files in project.
- make the TRX paths relative to the solution path.
- group TRX files by project.
- get the most recent file in a project for each project.
- use that to create the tree.
- read each of these files.

** STARTED Create project local variables                             :inner:
   :LOGBOOK:
   CLOCK: [2024-03-31 Sun 06:24]--[2024-03-31 Sun 06:28] =>  0:04
   CLOCK: [2024-03-31 Sun 05:56]--[2024-03-31 Sun 06:11] =>  0:15
   :END:

We need to create TRX variables for each project. Otherwise projects will
overwrite each other. We need to understand how other projects handle this.

** STARTED Add CI for project                                         :inner:
  :LOGBOOK:
  CLOCK: [2024-03-31 Sun 13:55]--[2024-03-31 Sun 14:09] =>  0:14
  CLOCK: [2024-03-31 Sun 06:28]--[2024-03-31 Sun 06:31] =>  0:03
  :END:

- we need to build and package the project.

** Allow expanding and collapsing tree                                :inner:

- make buffer read only, but still allowing for expanding and collapsing tree.

** User interface                                                     :inner:

Notes on the overall user interface for this mode.

We need the following dedicated buffers:

- tree widget: overview of all tests in project
- for each project, we need a list of available TRX files. One of these should
  be the currently loaded file. The tree should indicate when the TRX file is
  not the latest. We also need to know when we filter tests and did not run all
  tests.

*** Tree widget

Displays:

  - solutions
    - projects in solution
      - tests in project.

** Add build for Emacs                                                :outer:

We need CI for emacs so that when we push we compile and run all lisp tests.

** Add lisp skeleton                                                  :inner:

We need to add a trivial skeleton for lisp with a single function and a single
test.

** Investigate sharper code to read a solution                        :inner:

Sharper mode must already read a solution and get all of its projects. We need
to do something similar. Also check code to find all solutions and give user a
choice.

** Find out how to use icons in a widget tree                         :inner:

It would be nice to have icons for solutions and projects. There may already be
support for these with the fonts we have. It would also be nice to have icons
for green, yellow and red for tests.

** Add a command to run tests                                         :inner:

We should be able to:

- run all tests in the solution
- run all tests in the project
- run a specific.

From the tree, run tests at a specific node of the tree. In addition, we could
also have a specific "test" buffer which is a list, offering a table view of the
tests. Here you can run tests based on marking them.
